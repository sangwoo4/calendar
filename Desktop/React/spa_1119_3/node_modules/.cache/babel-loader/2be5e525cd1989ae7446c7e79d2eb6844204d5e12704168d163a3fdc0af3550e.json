{"ast":null,"code":"var _jsxFileName = \"/Users/park/Downloads/spa_1119_3/src/cmponents/pages/Calendar/Modal/IncomeModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IncomeModal = ({\n  isOpen,\n  closeModal,\n  selectedDate,\n  initialDate\n}) => {\n  _s();\n  const getDateKey = date => {\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    return `income ${year}-${month}-${day}`;\n  };\n\n  // 추가: 월별 데이터를 업데이트하는 함수\n  const updateMonthlyData = (currentMonth, updatedValue) => {\n    // 해당 월의 데이터만 가져오도록 수정\n    const monthlyData = localStorage.getItem(`monthlyData_${currentMonth}`) || 0;\n    const updatedData = Number(monthlyData) + updatedValue; // 값으로 받기\n\n    localStorage.setItem(`monthlyData_${currentMonth}`, updatedData);\n  };\n  const [incomeAsset, setIncomeAsset] = useState(initialDate || '');\n  const [incomeSource, setIncomeSource] = useState('');\n  const handleDateChange = newWorkValue => {\n    setIncomeAsset(newWorkValue);\n  };\n  const handleIncomeSourceChange = e => {\n    setIncomeSource(e.target.value);\n  };\n  const handleSave = () => {\n    const currentDateKey = getDateKey(selectedDate);\n    const savedValue = parseFloat(localStorage.getItem(currentDateKey)) || 0;\n    const newValue = parseFloat(incomeAsset) || 0;\n    const updatedValue = savedValue + newValue;\n    const currentMonth = selectedDate.getMonth();\n    updateMonthlyData(currentMonth, updatedValue);\n    localStorage.setItem(currentDateKey, updatedValue.toString());\n    if (incomeSource.trim() === '' || incomeAsset.trim() === '') {\n      alert('수입 출처와 수입 금액을 모두 입력해주세요.');\n      return;\n    }\n    closeModal();\n  };\n\n  // 추가: 월별 데이터 초기화 함수\n  const initMonthlyData = () => {\n    const currentMonth = new Date().getMonth();\n    const monthlyData = JSON.parse(localStorage.getItem(`monthlyData_${currentMonth}`)) || Array(12).fill(0);\n    console.log('Monthly Data from initMonthlyData:', monthlyData);\n    return monthlyData;\n  };\n\n  // 선택한 날짜와 현재 날짜가 같으면 저장된 값을 초기값으로 설정\n  useEffect(() => {\n    const currentDateKey = getDateKey(selectedDate);\n    const savedValue = localStorage.getItem(currentDateKey) || '';\n\n    // 모달이 열릴 때 incomeAsset을 초기 상태나 빈 문자열로 설정\n    setIncomeAsset(isOpen ? '' : savedValue);\n\n    // 월별 데이터 초기화\n    const monthlyData = initMonthlyData();\n    console.log('Monthly Data from useEffect:', monthlyData); // 확인용 콘솔 로그\n  }, [selectedDate, isOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `income-modal ${isOpen ? 'open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date\",\n      children: selectedDate.toLocaleDateString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" [\\uBD80\\uAC00 \\uC218\\uC785] \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Income-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" \\uC218\\uC785 \\uCD9C\\uCC98 : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"text\",\n        type: \"text\",\n        placeholder: \"\\uC218\\uC785 \\uCD9C\\uCC98\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n        value: incomeSource,\n        onChange: handleIncomeSourceChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" \\uC218\\uC785 \\uAE08\\uC561 : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"num\",\n        type: \"number\",\n        placeholder: \"\\uC218\\uC785 \\uAE08\\uC561\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n        value: incomeAsset,\n        onChange: e => handleDateChange(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btnOk\",\n        onClick: handleSave,\n        children: \"\\uB4F1\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btnCancel2\",\n        onClick: closeModal,\n        children: \"\\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(IncomeModal, \"zKNldbQMH6EwbKpkhhBXmlgtttY=\");\n_c = IncomeModal;\nexport default IncomeModal;\nvar _c;\n$RefreshReg$(_c, \"IncomeModal\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","IncomeModal","isOpen","closeModal","selectedDate","initialDate","_s","getDateKey","date","year","getFullYear","month","getMonth","day","getDate","updateMonthlyData","currentMonth","updatedValue","monthlyData","localStorage","getItem","updatedData","Number","setItem","incomeAsset","setIncomeAsset","incomeSource","setIncomeSource","handleDateChange","newWorkValue","handleIncomeSourceChange","e","target","value","handleSave","currentDateKey","savedValue","parseFloat","newValue","toString","trim","alert","initMonthlyData","Date","JSON","parse","Array","fill","console","log","className","children","toLocaleDateString","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","required","onClick","_c","$RefreshReg$"],"sources":["/Users/park/Downloads/spa_1119_3/src/cmponents/pages/Calendar/Modal/IncomeModal.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\n\nconst IncomeModal = ({ isOpen, closeModal, selectedDate, initialDate }) => {\n  const getDateKey = (date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    return `income ${year}-${month}-${day}`;\n  };\n\n  // 추가: 월별 데이터를 업데이트하는 함수\n  const updateMonthlyData = (currentMonth, updatedValue) => {\n    // 해당 월의 데이터만 가져오도록 수정\n    const monthlyData = localStorage.getItem(`monthlyData_${currentMonth}`) || 0;\n    const updatedData = Number(monthlyData) + updatedValue;  // 값으로 받기\n\n    localStorage.setItem(`monthlyData_${currentMonth}`, updatedData);\n};\n\n\n  const [incomeAsset, setIncomeAsset] = useState(initialDate || '');\n  const [incomeSource, setIncomeSource] = useState('');\n  const handleDateChange = (newWorkValue) => {\n    setIncomeAsset(newWorkValue);\n  };\n\n\n\n  const handleIncomeSourceChange = (e) => {\n    setIncomeSource(e.target.value);\n  };\n\n  const handleSave = () => {\n    const currentDateKey = getDateKey(selectedDate);\n    const savedValue = parseFloat(localStorage.getItem(currentDateKey)) || 0;\n    const newValue = parseFloat(incomeAsset) || 0;\n\n    const updatedValue = savedValue + newValue;\n\n    const currentMonth = selectedDate.getMonth();\n    updateMonthlyData(currentMonth, updatedValue);\n\n    localStorage.setItem(currentDateKey, updatedValue.toString());\n\n  \n    if (incomeSource.trim() === '' || incomeAsset.trim() === '') {\n      alert('수입 출처와 수입 금액을 모두 입력해주세요.');\n      return;\n    }\n    \n    closeModal();\n  };\n\n\n    // 추가: 월별 데이터 초기화 함수\n    const initMonthlyData = () => {\n      const currentMonth = new Date().getMonth();\n      const monthlyData = JSON.parse(localStorage.getItem(`monthlyData_${currentMonth}`)) || Array(12).fill(0);\n      console.log('Monthly Data from initMonthlyData:', monthlyData);\n      return monthlyData;\n    };\n  \n    \n    \n    // 선택한 날짜와 현재 날짜가 같으면 저장된 값을 초기값으로 설정\n    useEffect(() => {\n      const currentDateKey = getDateKey(selectedDate);\n      const savedValue = localStorage.getItem(currentDateKey) || '';\n  \n      // 모달이 열릴 때 incomeAsset을 초기 상태나 빈 문자열로 설정\n      setIncomeAsset(isOpen ? '' : savedValue);\n  \n      // 월별 데이터 초기화\n      const monthlyData = initMonthlyData();\n      console.log('Monthly Data from useEffect:', monthlyData); // 확인용 콘솔 로그\n    }, [selectedDate, isOpen]);\n  \n\n  return (\n    <div className={`income-modal ${isOpen ? 'open' : ''}`}>\n      <div className=\"date\">\n        {selectedDate.toLocaleDateString()}\n      </div>\n      <p> [부가 수입] </p>\n\n      <div className=\"Income-content\">\n        <p> 수입 출처 : </p>\n        <input\n          className='text'\n          type='text'\n          placeholder=\"수입 출처를 입력해주세요\"\n          value={incomeSource}\n          onChange={handleIncomeSourceChange}\n        />\n        <p> 수입 금액 : </p>\n        <input\n          className='num'\n          type='number'\n          placeholder=\"수입 금액을 입력해주세요\"\n          value={incomeAsset}\n          onChange={(e)=> handleDateChange(e.target.value)}\n          required\n        />\n      </div>\n      <p>\n        <button className=\"btnOk\" onClick={handleSave}>\n          등록\n        </button>\n        <button className=\"btnCancel2\" onClick={closeModal}>\n          취소\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default IncomeModal;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}